# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SnWMac-dfkiiA7noEx38UIF2Tn3bjjCE
"""

import joblib
import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder, StandardScaler

def load_classifier(file_path):
    """
    저장된 모델을 불러오는 함수
    """
    classifier = joblib.load(file_path)
    return classifier

def preprocess_data(data):
    """
    주어진 데이터를 가공하는 함수
    """
    # 데이터 가공
    data_list = data.split(',')
    columns = ['director_name', 'duration', 'director_facebook_likes', 'actor_3_facebook_likes',
               'actor_2_name', 'actor_1_facebook_likes', 'gross', 'genres', 'actor_1_name', 'num_voted_users',
               'actor_3_name', 'facenumber_in_poster', 'plot_keywords', 'num_user_for_reviews', 'language', 'country',
               'content_rating', 'budget', 'title_year', 'actor_2_facebook_likes','aspect_ratio', 'movie_facebook_likes']
    df = pd.DataFrame([data_list], columns=columns)

    # 범주형 데이터 라벨 인코딩
    cat_list = ['director_name', 'actor_2_name', 'genres', 'actor_1_name',
                'actor_3_name', 'plot_keywords', 'language', 'country', 'content_rating', 'title_year', 'aspect_ratio']
    le = LabelEncoder()
    df[cat_list] = df[cat_list].apply(lambda x: le.fit_transform(x))

    # 데이터 표준화
    sc = StandardScaler()
    df = sc.fit_transform(df)
    df = pd.DataFrame(df)

    return df

def predict_with_classifier(classifier, data):
    """
    분류기로 예측하는 함수
    """
    my_y_pred = classifier.predict(data)
    return my_y_pred